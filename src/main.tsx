import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'
import { indexedDBService } from './services/indexedDBService';

// üîß ENREGISTREMENT DU SERVICE WORKER
const registerServiceWorker = async () => {
  if ('serviceWorker' in navigator) {
    try {
      console.log('üîç V√©rification support Service Worker...');
      
      const registration = await navigator.serviceWorker.register('/sw.js', {
        scope: '/'
      });
      
      console.log('‚úÖ Service Worker enregistr√© avec succ√®s:', registration);
      
      registration.addEventListener('updatefound', () => {
        const newWorker = registration.installing;
        console.log('üîÑ Nouvelle version du Service Worker d√©tect√©e');
        
        if (newWorker) {
          newWorker.addEventListener('statechange', () => {
            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
              console.log('üÜï Service Worker mis √† jour et pr√™t');
            }
          });
        }
      });
      
      if (registration.waiting) {
        console.log('‚è≥ Service Worker en attente d\'activation');
      }
      
      if (registration.active) {
        console.log('üéØ Service Worker actif');
      }
      
      return registration;
    } catch (error) {
      console.error('‚ùå Erreur enregistrement Service Worker:', error);
    }
  } else {
    console.warn('‚ö†Ô∏è Service Worker non support√© par ce navigateur');
  }
};

// üíæ INITIALISATION INDEXEDDB
const initializeIndexedDB = async () => {
  try {
    console.log('üíæ Initialisation IndexedDB...');
    await indexedDBService.init();
    console.log('‚úÖ IndexedDB initialis√© avec succ√®s');
    
    const stats = await indexedDBService.getStorageStats();
    console.log('üìä Statistiques stockage offline:', stats);
    
  } catch (error) {
    console.error('‚ùå Erreur initialisation IndexedDB:', error);
  }
};

// üì± V√âRIFICATION SUPPORT PWA
const checkPWACapabilities = () => {
  const capabilities = {
    serviceWorker: 'serviceWorker' in navigator,
    indexedDB: 'indexedDB' in window,
    pushNotifications: 'PushManager' in window,
    backgroundSync: 'serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype,
    installPrompt: 'BeforeInstallPromptEvent' in window || 
                   ('standalone' in navigator) || 
                   window.matchMedia('(display-mode: standalone)').matches
  };
  
  console.log('üìä Capacit√©s PWA d√©tect√©es:', capabilities);
  
  if (import.meta.env.VITE_DEBUG === 'true') {
    console.table(capabilities);
  }
  
  return capabilities;
};

// üåê D√âTECTION DE L'√âTAT R√âSEAU
const setupNetworkDetection = () => {
  const updateNetworkStatus = () => {
    const isOnline = navigator.onLine;
    console.log(`üåê √âtat r√©seau: ${isOnline ? 'EN LIGNE' : 'HORS LIGNE'}`);
    
    window.dispatchEvent(new CustomEvent('networkStatusChange', {
      detail: { isOnline }
    }));
  };

  window.addEventListener('online', updateNetworkStatus);
  window.addEventListener('offline', updateNetworkStatus);
  
  updateNetworkStatus();
};

// üì° COMMUNICATION AVEC LE SERVICE WORKER
const setupServiceWorkerCommunication = () => {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.addEventListener('message', (event) => {
      const { type, payload } = event.data;
      
      switch (type) {
        case 'REQUEST_AUTH_TOKEN':
          // Le SW demande le token d'auth
          const token = localStorage.getItem('authToken') || 
                        localStorage.getItem('token') || 
                        localStorage.getItem('accessToken');
          
          // R√©pondre avec le token
          event.ports[0].postMessage({
            type: 'AUTH_TOKEN_RESPONSE',
            token: token
          });
          
          console.log('üì° Token d\'auth envoy√© au Service Worker');
          break;
          
        case 'SYNC_COMPLETE':
          // Synchronisation termin√©e
          console.log('üîÑ Sync termin√©e depuis SW:', payload);
          
          // Dispatch un √©v√©nement personnalis√© pour l'application
          window.dispatchEvent(new CustomEvent('swSyncComplete', {
            detail: payload
          }));
          break;
          
        case 'SYNC_ERROR':
          console.error('‚ùå Erreur sync depuis SW:', payload);
          
          window.dispatchEvent(new CustomEvent('swSyncError', {
            detail: payload
          }));
          break;
          
        default:
          console.log('Message SW non g√©r√©:', type);
      }
    });
  }
};

// üöÄ INITIALISATION DE L'APPLICATION
const initializeApp = async () => {
  console.log('üöÄ Initialisation EasyPOS...');
  
  // 1. V√©rifier les capacit√©s PWA
  const pwaCapabilities = checkPWACapabilities();
  
  // 2. Configurer la d√©tection r√©seau
  setupNetworkDetection();
  
  // 3. Initialiser IndexedDB en premier
  if (pwaCapabilities.indexedDB) {
    await initializeIndexedDB();
  } else {
    console.warn('‚ö†Ô∏è IndexedDB non support√© - Mode offline limit√©');
  }
  
  // 4. Enregistrer le Service Worker
  if (pwaCapabilities.serviceWorker) {
    await registerServiceWorker();
  }
  
  // 5. NOUVEAU : Configurer la communication avec le Service Worker
  setupServiceWorkerCommunication();
  
  // 6. Monter l'application React
  const rootElement = document.getElementById('root');
  if (rootElement) {
    const root = ReactDOM.createRoot(rootElement);
    root.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>
    );
    console.log('‚úÖ Application React mont√©e avec succ√®s');
  } else {
    console.error('‚ùå √âl√©ment root non trouv√©');
  }
  
  console.log('üéâ EasyPOS initialis√© - PWA avec Background Sync pr√™te !');
};

// üèÅ D√âMARRAGE
initializeApp().catch((error) => {
  console.error('‚ùå Erreur lors de l\'initialisation:', error);
});